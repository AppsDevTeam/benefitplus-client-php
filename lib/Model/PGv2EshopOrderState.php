<?php
/**
 * PGv2EshopOrderState
 *
 * PHP version 5
 *
 * @category Class
 * @package  BenefitPlus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Benefit Plus payment gate API (version 2)
 *
 * OpenAPI dokumentace k [Platební bráně Benefit Plus v2](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1125646355/Dokumentace+k+nov+platebn+br+n+pro+e-shopy+v2).
 *
 * OpenAPI spec version: 2.2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.30
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BenefitPlus\Model;

use \ArrayAccess;
use \BenefitPlus\ObjectSerializer;

/**
 * PGv2EshopOrderState Class Doc Comment
 *
 * @category Class
 * @description DTO slouží pro vrácení informací o stavu objednávky. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/BP/pages/1125646407/DTO+PGv2+EshopOrder+State)
 * @package  BenefitPlus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PGv2EshopOrderState implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PGv2_EshopOrder_State';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_id' => 'string',
'description' => 'string',
'price' => 'float',
'is_partial_payment_allowed' => 'bool',
'marketplace_name' => 'string',
'order_state' => 'string',
'created' => '\DateTime',
'date_from' => '\DateTime',
'date_to' => '\DateTime',
'shopping_cart_id' => 'string',
'currency' => '\BenefitPlus\Model\PGv2Unit',
'payment_results' => '\BenefitPlus\Model\PGv2PaymentResult[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_id' => null,
'description' => null,
'price' => null,
'is_partial_payment_allowed' => null,
'marketplace_name' => null,
'order_state' => null,
'created' => 'date-time',
'date_from' => 'date-time',
'date_to' => 'date-time',
'shopping_cart_id' => null,
'currency' => null,
'payment_results' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'OrderID',
'description' => 'Description',
'price' => 'Price',
'is_partial_payment_allowed' => 'IsPartialPaymentAllowed',
'marketplace_name' => 'MarketplaceName',
'order_state' => 'OrderState',
'created' => 'Created',
'date_from' => 'DateFrom',
'date_to' => 'DateTo',
'shopping_cart_id' => 'ShoppingCartID',
'currency' => 'Currency',
'payment_results' => 'PaymentResults'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
'description' => 'setDescription',
'price' => 'setPrice',
'is_partial_payment_allowed' => 'setIsPartialPaymentAllowed',
'marketplace_name' => 'setMarketplaceName',
'order_state' => 'setOrderState',
'created' => 'setCreated',
'date_from' => 'setDateFrom',
'date_to' => 'setDateTo',
'shopping_cart_id' => 'setShoppingCartId',
'currency' => 'setCurrency',
'payment_results' => 'setPaymentResults'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
'description' => 'getDescription',
'price' => 'getPrice',
'is_partial_payment_allowed' => 'getIsPartialPaymentAllowed',
'marketplace_name' => 'getMarketplaceName',
'order_state' => 'getOrderState',
'created' => 'getCreated',
'date_from' => 'getDateFrom',
'date_to' => 'getDateTo',
'shopping_cart_id' => 'getShoppingCartId',
'currency' => 'getCurrency',
'payment_results' => 'getPaymentResults'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['is_partial_payment_allowed'] = isset($data['is_partial_payment_allowed']) ? $data['is_partial_payment_allowed'] : null;
        $this->container['marketplace_name'] = isset($data['marketplace_name']) ? $data['marketplace_name'] : null;
        $this->container['order_state'] = isset($data['order_state']) ? $data['order_state'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['date_from'] = isset($data['date_from']) ? $data['date_from'] : null;
        $this->container['date_to'] = isset($data['date_to']) ? $data['date_to'] : null;
        $this->container['shopping_cart_id'] = isset($data['shopping_cart_id']) ? $data['shopping_cart_id'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['payment_results'] = isset($data['payment_results']) ? $data['payment_results'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['order_id'] === null) {
            $invalidProperties[] = "'order_id' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['is_partial_payment_allowed'] === null) {
            $invalidProperties[] = "'is_partial_payment_allowed' can't be null";
        }
        if ($this->container['marketplace_name'] === null) {
            $invalidProperties[] = "'marketplace_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id ID objednávky, přidělené eshopem.
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Popis objednávky, který v eshopu zadal uživatel.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price Hodnota benefitu, kterou objednáváme.
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets is_partial_payment_allowed
     *
     * @return bool
     */
    public function getIsPartialPaymentAllowed()
    {
        return $this->container['is_partial_payment_allowed'];
    }

    /**
     * Sets is_partial_payment_allowed
     *
     * @param bool $is_partial_payment_allowed Zda je povolena částečná platba z interních účtů.
     *
     * @return $this
     */
    public function setIsPartialPaymentAllowed($is_partial_payment_allowed)
    {
        $this->container['is_partial_payment_allowed'] = $is_partial_payment_allowed;

        return $this;
    }

    /**
     * Gets marketplace_name
     *
     * @return string
     */
    public function getMarketplaceName()
    {
        return $this->container['marketplace_name'];
    }

    /**
     * Sets marketplace_name
     *
     * @param string $marketplace_name Název obchodního místa (eshopu).
     *
     * @return $this
     */
    public function setMarketplaceName($marketplace_name)
    {
        $this->container['marketplace_name'] = $marketplace_name;

        return $this;
    }

    /**
     * Gets order_state
     *
     * @return string
     */
    public function getOrderState()
    {
        return $this->container['order_state'];
    }

    /**
     * Sets order_state
     *
     * @param string $order_state Stav vyřízení/zaplacení objednávky na straně backendu. Klíče dle enumu Enum PGv2_E_OrderState. Používá se textový klíč enumu (např. “New“), nikoli číselná hodnota.
     *
     * @return $this
     */
    public function setOrderState($order_state)
    {
        $this->container['order_state'] = $order_state;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Datumočas založení objednávky.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets date_from
     *
     * @return \DateTime
     */
    public function getDateFrom()
    {
        return $this->container['date_from'];
    }

    /**
     * Sets date_from
     *
     * @param \DateTime $date_from Datum od - první den pobytu v hotelu.
     *
     * @return $this
     */
    public function setDateFrom($date_from)
    {
        $this->container['date_from'] = $date_from;

        return $this;
    }

    /**
     * Gets date_to
     *
     * @return \DateTime
     */
    public function getDateTo()
    {
        return $this->container['date_to'];
    }

    /**
     * Sets date_to
     *
     * @param \DateTime $date_to Datum to - poslední den pobytu v hotelu.
     *
     * @return $this
     */
    public function setDateTo($date_to)
    {
        $this->container['date_to'] = $date_to;

        return $this;
    }

    /**
     * Gets shopping_cart_id
     *
     * @return string
     */
    public function getShoppingCartId()
    {
        return $this->container['shopping_cart_id'];
    }

    /**
     * Sets shopping_cart_id
     *
     * @param string $shopping_cart_id ID nákupního košíku, přidělené eshopem.
     *
     * @return $this
     */
    public function setShoppingCartId($shopping_cart_id)
    {
        $this->container['shopping_cart_id'] = $shopping_cart_id;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \BenefitPlus\Model\PGv2Unit
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \BenefitPlus\Model\PGv2Unit $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets payment_results
     *
     * @return \BenefitPlus\Model\PGv2PaymentResult[]
     */
    public function getPaymentResults()
    {
        return $this->container['payment_results'];
    }

    /**
     * Sets payment_results
     *
     * @param \BenefitPlus\Model\PGv2PaymentResult[] $payment_results List objektů DTO PGv2_PaymentResult s informacemi o jednotlivých pokusech o platbu. List je seřazen dle času (nejnovější nahoře), tedy top(1) záznam listu obsahuje informace o aktuálním stavu.
     *
     * @return $this
     */
    public function setPaymentResults($payment_results)
    {
        $this->container['payment_results'] = $payment_results;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
