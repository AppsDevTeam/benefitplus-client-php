<?php
/**
 * PGv2ConfirmResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  BenefitPlus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Benefit Plus payment gate API (version 2)
 *
 * OpenAPI dokumentace k [Platební bráně Benefit Plus v2](https://benefit-kelnero.atlassian.net/wiki/spaces/NPBBP/pages/1125646355/Dokumentace+k+nov+platebn+br+n+pro+e-shopy+v2).
 *
 * OpenAPI spec version: 2.1.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.26
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BenefitPlus\Model;

use \ArrayAccess;
use \BenefitPlus\ObjectSerializer;

/**
 * PGv2ConfirmResult Class Doc Comment
 *
 * @category Class
 * @description DTO slouží pro vracení informací o zaplacení objednávky. [Online dokumentace je dostupná zde](https://benefit-kelnero.atlassian.net/wiki/spaces/BP/pages/1125941313/DTO+PGv2+Confirm+Result)
 * @package  BenefitPlus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PGv2ConfirmResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PGv2_Confirm_Result';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'eshop_order_guid' => 'string',
'eshop_payment_guid' => 'string',
'price' => 'float',
'pc_payment_price' => 'float',
'marketplace_name' => 'string',
'currency' => '\BenefitPlus\Model\PGv2Unit',
'pc_currency' => '\BenefitPlus\Model\PGv2Unit',
'wallets' => '\BenefitPlus\Model\PGv2BalanceWalletResult[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'eshop_order_guid' => null,
'eshop_payment_guid' => null,
'price' => null,
'pc_payment_price' => null,
'marketplace_name' => null,
'currency' => null,
'pc_currency' => null,
'wallets' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'eshop_order_guid' => 'EshopOrderGUID',
'eshop_payment_guid' => 'EshopPaymentGUID',
'price' => 'Price',
'pc_payment_price' => 'PCPaymentPrice',
'marketplace_name' => 'MarketplaceName',
'currency' => 'Currency',
'pc_currency' => 'PCCurrency',
'wallets' => 'Wallets'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'eshop_order_guid' => 'setEshopOrderGuid',
'eshop_payment_guid' => 'setEshopPaymentGuid',
'price' => 'setPrice',
'pc_payment_price' => 'setPcPaymentPrice',
'marketplace_name' => 'setMarketplaceName',
'currency' => 'setCurrency',
'pc_currency' => 'setPcCurrency',
'wallets' => 'setWallets'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'eshop_order_guid' => 'getEshopOrderGuid',
'eshop_payment_guid' => 'getEshopPaymentGuid',
'price' => 'getPrice',
'pc_payment_price' => 'getPcPaymentPrice',
'marketplace_name' => 'getMarketplaceName',
'currency' => 'getCurrency',
'pc_currency' => 'getPcCurrency',
'wallets' => 'getWallets'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['eshop_order_guid'] = isset($data['eshop_order_guid']) ? $data['eshop_order_guid'] : null;
        $this->container['eshop_payment_guid'] = isset($data['eshop_payment_guid']) ? $data['eshop_payment_guid'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['pc_payment_price'] = isset($data['pc_payment_price']) ? $data['pc_payment_price'] : null;
        $this->container['marketplace_name'] = isset($data['marketplace_name']) ? $data['marketplace_name'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['pc_currency'] = isset($data['pc_currency']) ? $data['pc_currency'] : null;
        $this->container['wallets'] = isset($data['wallets']) ? $data['wallets'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['eshop_order_guid'] === null) {
            $invalidProperties[] = "'eshop_order_guid' can't be null";
        }
        if ($this->container['eshop_payment_guid'] === null) {
            $invalidProperties[] = "'eshop_payment_guid' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['marketplace_name'] === null) {
            $invalidProperties[] = "'marketplace_name' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets eshop_order_guid
     *
     * @return string
     */
    public function getEshopOrderGuid()
    {
        return $this->container['eshop_order_guid'];
    }

    /**
     * Sets eshop_order_guid
     *
     * @param string $eshop_order_guid Jedinečný GUID založené objednávky.
     *
     * @return $this
     */
    public function setEshopOrderGuid($eshop_order_guid)
    {
        $this->container['eshop_order_guid'] = $eshop_order_guid;

        return $this;
    }

    /**
     * Gets eshop_payment_guid
     *
     * @return string
     */
    public function getEshopPaymentGuid()
    {
        return $this->container['eshop_payment_guid'];
    }

    /**
     * Sets eshop_payment_guid
     *
     * @param string $eshop_payment_guid Jedinečný GUID pokusu o platbu.
     *
     * @return $this
     */
    public function setEshopPaymentGuid($eshop_payment_guid)
    {
        $this->container['eshop_payment_guid'] = $eshop_payment_guid;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price Celková částka platby, přejato z objednávky.
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets pc_payment_price
     *
     * @return float
     */
    public function getPcPaymentPrice()
    {
        return $this->container['pc_payment_price'];
    }

    /**
     * Sets pc_payment_price
     *
     * @param float $pc_payment_price Velikost potřebného doplatku privátní kartou. Null = 0. Vrací se pouze tehdy, bude-li třeba provést doplatek privátní kartou. Pokud probíhá platba (výběr z účtu), hodnota bude záporná.
     *
     * @return $this
     */
    public function setPcPaymentPrice($pc_payment_price)
    {
        $this->container['pc_payment_price'] = $pc_payment_price;

        return $this;
    }

    /**
     * Gets marketplace_name
     *
     * @return string
     */
    public function getMarketplaceName()
    {
        return $this->container['marketplace_name'];
    }

    /**
     * Sets marketplace_name
     *
     * @param string $marketplace_name Název obchodního místa (eshopu).
     *
     * @return $this
     */
    public function setMarketplaceName($marketplace_name)
    {
        $this->container['marketplace_name'] = $marketplace_name;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \BenefitPlus\Model\PGv2Unit
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \BenefitPlus\Model\PGv2Unit $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets pc_currency
     *
     * @return \BenefitPlus\Model\PGv2Unit
     */
    public function getPcCurrency()
    {
        return $this->container['pc_currency'];
    }

    /**
     * Sets pc_currency
     *
     * @param \BenefitPlus\Model\PGv2Unit $pc_currency pc_currency
     *
     * @return $this
     */
    public function setPcCurrency($pc_currency)
    {
        $this->container['pc_currency'] = $pc_currency;

        return $this;
    }

    /**
     * Gets wallets
     *
     * @return \BenefitPlus\Model\PGv2BalanceWalletResult[]
     */
    public function getWallets()
    {
        return $this->container['wallets'];
    }

    /**
     * Sets wallets
     *
     * @param \BenefitPlus\Model\PGv2BalanceWalletResult[] $wallets List rozpadu plateb na peněženky.
     *
     * @return $this
     */
    public function setWallets($wallets)
    {
        $this->container['wallets'] = $wallets;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
